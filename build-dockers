#!/usr/bin/env python3
import os
import shutil
import tempfile
from contextlib import contextmanager
from pathlib import Path
from subprocess import check_call


BASE_DEBIAN_PACKAGES = frozenset({
    'ca-certificates',
    'curl',
    'libpython-all-dev',
    'libpython3-all-dev',
    'python-all',
    'python-all-dev',
    'python-pip',
    'python3-all',
    'python3-all-dev',
    'python3-pip',
    'wget',
})

DUMB_INIT_INSTALL = '''\
RUN wget -O /tmp/dumb-init.deb \
        https://github.com/Yelp/dumb-init/releases/download/v1.0.0/dumb-init_1.0.0_amd64.deb \
    && dpkg -i /tmp/dumb-init.deb \
    && rm /tmp/dumb-init.deb
'''

ADD_BUILD_WHEEL = '''\
COPY build-wheel /usr/local/bin/build-wheel
chmod +x /usr/local/bin/build-wheel
'''

DOCKERS = {
    'jessie': {
        'extra_apt_install': set(),
    },
}


def build_apt_install(packages):
    return (
        'RUN apt-get update '
        '&& apt-get install -y --no-install-recommends {} '
        '&& apt-get clean\n'
    ).format(
        ' '.join(packages)
    )


@contextmanager
def chdir(path):
    orig = os.getcwd()
    os.chdir(str(path))
    yield
    os.chdir(orig)


def build_docker(dist):
    params = DOCKERS[dist]
    tag = 'docker.ocf.berkeley.edu:5000/builder-{}'.format(dist)

    with open(os.path.join('dockers', dist)) as f:
        template = f.read()

    apt_packages = (
        (BASE_DEBIAN_PACKAGES | params.get('extra_apt_install', set()))
        - params.get('apt_blacklist', set())
    )
    replacements = {
        ('{DUMB_INIT_INSTALL}', DUMB_INIT_INSTALL),
        ('{APT_INSTALL}', build_apt_install(apt_packages)),
        ('{ADD_BUILD_WHEEL}', ADD_BUILD_WHEEL),
        ('{ENTRYPOINT}', 'ENTRYPOINT /usr/bin/dumb-init /usr/local/bin/build-wheel'),
    }
    for key, replacement in replacements:
        template = template.replace(key, replacement)

    tempdir = Path(tempfile.mkdtemp())
    try:
        with (tempdir / 'Dockerfile').open('w') as f:
            f.write(template)
        shutil.copyfile('build-wheel', str(tempdir / 'build-wheel'))

        with chdir(tempdir):
            check_call(('docker', 'build', '--no-cache', '-t', tag, '.'))
        check_call(('docker', 'push', tag))
    finally:
        shutil.rmtree(str(tempdir))


if __name__ == '__main__':
    for docker in DOCKERS:
        build_docker(docker)
